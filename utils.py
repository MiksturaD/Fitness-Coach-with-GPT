"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞
"""

import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional

def format_workout_schedule(workouts: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    
    Args:
        workouts: –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    """
    if not workouts:
        return "üìÖ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
    
    schedule = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</b>\n\n"
    
    for i, workout in enumerate(workouts, 1):
        status = "‚úÖ" if workout.get('completed') else "‚è≥"
        workout_type = workout.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        date = workout.get('scheduled_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        
        schedule += f"{i}. {status} {workout_type} - {date}\n"
    
    return schedule

def calculate_weekly_stats(workouts: List[Dict]) -> Dict:
    """
    –†–∞—Å—á–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    
    Args:
        workouts: –°–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é
        
    Returns:
        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    """
    if not workouts:
        return {
            'total_workouts': 0,
            'completed_workouts': 0,
            'completion_rate': 0,
            'workout_types': {}
        }
    
    total = len(workouts)
    completed = sum(1 for w in workouts if w.get('completed', False))
    completion_rate = (completed / total) * 100 if total > 0 else 0
    
    # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    workout_types = {}
    for workout in workouts:
        workout_type = workout.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        workout_types[workout_type] = workout_types.get(workout_type, 0) + 1
    
    return {
        'total_workouts': total,
        'completed_workouts': completed,
        'completion_rate': round(completion_rate, 1),
        'workout_types': workout_types
    }

def format_progress_summary(progress_data: List[Dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    
    Args:
        progress_data: –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞
    """
    if not progress_data:
        return "üìä –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ"
    
    summary = "üìä <b>–°–≤–æ–¥–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:</b>\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º
    metrics = {}
    for item in progress_data:
        metric_name = item.get('metric_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        if metric_name not in metrics:
            metrics[metric_name] = []
        metrics[metric_name].append(item)
    
    for metric_name, items in metrics.items():
        summary += f"<b>{metric_name}:</b>\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –∑–Ω–∞—á–µ–Ω–∏—è
        recent_items = sorted(items, key=lambda x: x.get('date', ''), reverse=True)[:3]
        
        for item in recent_items:
            value = item.get('metric_value', 'N/A')
            date = item.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
            notes = item.get('notes', '')
            
            summary += f"  ‚Ä¢ {value} ({date})"
            if notes:
                summary += f" - {notes}"
            summary += "\n"
        
        summary += "\n"
    
    return summary

def generate_motivational_quote() -> str:
    """
    –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
    
    Returns:
        –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
    """
    quotes = [
        "üí™ –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ - —ç—Ç–æ —à–∞–≥ –∫ –ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–∏ —Å–µ–±—è",
        "üî• –°–∏–ª–∞ –Ω–µ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∞–¥–∞—Ç—å, –∞ –≤ —Ç–æ–º, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –ø–æ–¥–Ω–∏–º–∞—Ç—å—Å—è",
        "üèÉ‚Äç‚ôÇÔ∏è –î–≤–∏–∂–µ–Ω–∏–µ - —ç—Ç–æ –∂–∏–∑–Ω—å, –∞ –∂–∏–∑–Ω—å - —ç—Ç–æ –¥–≤–∏–∂–µ–Ω–∏–µ",
        "üåü –¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å, –∏ —Å–ø–æ—Å–æ–±–Ω–µ–µ, —á–µ–º –º–æ–∂–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å",
        "üéØ –¶–µ–ª—å –±–µ–∑ –ø–ª–∞–Ω–∞ - —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∂–µ–ª–∞–Ω–∏–µ",
        "üíé –ê–ª–º–∞–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º, –∞ —á–µ–º–ø–∏–æ–Ω - –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö",
        "üöÄ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É—Å–∏–ª–∏—è - —ç—Ç–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        "üåà –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –±—É—Ä–∏ –ø—Ä–∏—Ö–æ–¥–∏—Ç —Ä–∞–¥—É–≥–∞, –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - —Å–∏–ª–∞",
        "‚ö° –≠–Ω–µ—Ä–≥–∏—è –∏ –Ω–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –ø–æ–±–µ–∂–¥–∞—é—Ç –≤—Å–µ",
        "üé™ –ñ–∏–∑–Ω—å - —ç—Ç–æ –Ω–µ —Å–ø—Ä–∏–Ω—Ç, –∞ –º–∞—Ä–∞—Ñ–æ–Ω. –¢—Ä–µ–Ω–∏—Ä—É–π—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ"
    ]
    
    import random
    return random.choice(quotes)

def format_user_profile(user_info: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    """
    profile = f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å {user_info.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}</b>\n\n"
    
    # –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    fitness_level = user_info.get('fitness_level', '–ù–µ —É–∫–∞–∑–∞–Ω')
    level_emoji = {
        'beginner': 'üü¢',
        'intermediate': 'üü°', 
        'advanced': 'üî¥'
    }
    level_name = {
        'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
        'intermediate': '–°—Ä–µ–¥–Ω–∏–π',
        'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
    }
    
    emoji = level_emoji.get(fitness_level, '‚ö™')
    level = level_name.get(fitness_level, fitness_level)
    
    profile += f"üìä <b>–£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:</b> {emoji} {level}\n"
    
    # –¶–µ–ª–∏
    goals = user_info.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')
    profile += f"üéØ <b>–¶–µ–ª–∏:</b> {goals}\n"
    
    # –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    created_at = user_info.get('created_at', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    if created_at and created_at != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
        try:
            date_obj = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            days_ago = (datetime.now() - date_obj).days
            profile += f"üìÖ <b>–í —Å–∏—Å—Ç–µ–º–µ:</b> {days_ago} –¥–Ω–µ–π\n"
        except:
            profile += f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {created_at}\n"
    
    return profile

def suggest_next_workout(user_info: Dict, last_workout: Optional[Dict] = None) -> str:
    """
    –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    
    Args:
        user_info: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        last_workout: –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
        
    Returns:
        –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    """
    level = user_info.get('fitness_level', 'beginner')
    
    suggestions = {
        'beginner': [
            "üö∂‚Äç‚ôÇÔ∏è –ü—Ä–æ–≥—É–ª–∫–∞ 30 –º–∏–Ω—É—Ç + –ª–µ–≥–∫–∞—è —Ä–∞–∑–º–∏–Ω–∫–∞",
            "üßò‚Äç‚ôÄÔ∏è –ô–æ–≥–∞ –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö 20 –º–∏–Ω—É—Ç",
            "üí™ –ë–∞–∑–æ–≤—ã–µ –æ—Ç–∂–∏–º–∞–Ω–∏—è –æ—Ç —Å—Ç–µ–Ω—ã 3x5",
            "üèÉ‚Äç‚ôÇÔ∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è —Ö–æ–¥—å–±–∞ 20 –º–∏–Ω—É—Ç"
        ],
        'intermediate': [
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –ö—Ä—É–≥–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 45 –º–∏–Ω—É—Ç",
            "üö¥‚Äç‚ôÇÔ∏è –í–µ–ª–æ—Ç—Ä–µ–Ω–∞–∂–µ—Ä 30 –º–∏–Ω—É—Ç + —Å–∏–ª–æ–≤—ã–µ",
            "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥ 5–∫–º + —Ä–∞—Å—Ç—è–∂–∫–∞",
            "üí™ –ö–æ–º–ø–ª–µ–∫—Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏"
        ],
        'advanced': [
            "üî• HIIT —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 40 –º–∏–Ω—É—Ç",
            "üèãÔ∏è‚Äç‚ôÇÔ∏è –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ 60 –º–∏–Ω—É—Ç",
            "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥ 10–∫–º + —Å–∫–æ—Ä–æ—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã",
            "üí™ –ö—Ä–æ—Å—Å—Ñ–∏—Ç –∫–æ–º–ø–ª–µ–∫—Å"
        ]
    }
    
    import random
    suggestion = random.choice(suggestions.get(level, suggestions['beginner']))
    
    if last_workout:
        last_type = last_workout.get('type', '')
        if 'cardio' in last_type.lower() or '–±–µ–≥' in last_type.lower():
            suggestion = "üí™ –°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (—á–µ—Ä–µ–¥—É–µ–º —Å –∫–∞—Ä–¥–∏–æ)"
        elif '—Å–∏–ª–æ–≤–∞—è' in last_type.lower() or 'strength' in last_type.lower():
            suggestion = "üèÉ‚Äç‚ôÇÔ∏è –ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (—á–µ—Ä–µ–¥—É–µ–º —Å —Å–∏–ª–æ–≤–æ–π)"
    
    return f"üí° <b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n{suggestion}"

def format_group_workout_summary(users: List[Dict], workout_type: str = "group") -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    
    Args:
        users: –°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        workout_type: –¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        
    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–≤–æ–¥–∫–∞
    """
    if not users:
        return "üë• –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"
    
    summary = f"üë• <b>–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: {workout_type}</b>\n\n"
    summary += f"üìä <b>–£—á–∞—Å—Ç–Ω–∏–∫–∏ ({len(users)}):</b>\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—é –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏
    levels = {}
    for user in users:
        level = user.get('fitness_level', 'beginner')
        if level not in levels:
            levels[level] = []
        levels[level].append(user.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'))
    
    level_names = {
        'beginner': 'üü¢ –ù–∞—á–∏–Ω–∞—é—â–∏–µ',
        'intermediate': 'üü° –°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å',
        'advanced': 'üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ'
    }
    
    for level, names in levels.items():
        emoji_name = level_names.get(level, level)
        summary += f"{emoji_name}: {', '.join(names)}\n"
    
    summary += f"\nüéØ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"
    
    if len(users) == 2:
        summary += "‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø–∞—Ä–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        summary += "‚Ä¢ –í–∑–∞–∏–º–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –º–æ—Ç–∏–≤–∞—Ü–∏—è\n"
        summary += "‚Ä¢ –ú–æ–∂–Ω–æ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º\n"
    elif len(users) <= 4:
        summary += "‚Ä¢ –û—Ç–ª–∏—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –∫—Ä—É–≥–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        summary += "‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–æ—Ç–∞—Ü–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        summary += "‚Ä¢ –ì—Ä—É–ø–ø–æ–≤–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ –∏ –≤–µ—Å–µ–ª—å–µ\n"
    else:
        summary += "‚Ä¢ –†–∞–∑–¥–µ–ª–∏—Ç–µ—Å—å –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–ø—ã –ø–æ —É—Ä–æ–≤–Ω—é\n"
        summary += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
        summary += "‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è\n"
    
    return summary
