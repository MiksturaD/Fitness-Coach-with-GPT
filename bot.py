import asyncio
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode

from config import TELEGRAM_TOKEN, BOT_NAME, MAX_MESSAGE_LENGTH
from database import FitnessDatabase
from ai_client import OpenRouterClient

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class FitnessTrainerBot:
    def __init__(self):
        self.db = FitnessDatabase("fitness_trainer.db")
        from config import OPENROUTER_API_KEY
        self.ai_client = OpenRouterClient(api_key=OPENROUTER_API_KEY)
        
        # –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        self.commands = {
            'start': '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º',
            'help': '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º',
            'profile': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Ñ–∏—Ç–Ω–µ—Å–∞',
            'workout': '–ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'group_workout': '–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
            'progress': '–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å',
            'motivation': '–ü–æ–ª—É—á–∏—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é',
            'stats': '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫'
        }
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        chat = update.effective_chat
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —á–∞—Ç –≤ –±–∞–∑–µ
        self.db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        self.db.add_chat(
            chat_id=chat.id,
            chat_type=chat.type,
            chat_title=chat.title
        )
        
        welcome_message = f"""
üèãÔ∏è‚Äç‚ôÇÔ∏è –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø {BOT_NAME}!

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏ —Ç–≤–æ–µ–π —Å–µ–º—å–µ –¥–æ—Å—Ç–∏—á—å —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–ª–µ–π! 

–ß—Ç–æ —è —É–º–µ—é:
‚úÖ –°–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
‚úÖ –î–∞–≤–∞—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–µ —Å–æ–≤–µ—Ç—ã
‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ –æ—Ç–¥—ã—Ö–µ
‚úÖ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ–¥ —Ç–≤–æ–π —É—Ä–æ–≤–µ–Ω—å

–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π!

–ù–∞—á–Ω–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∫–æ–º–∞–Ω–¥–æ–π /profile üéØ
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏
        keyboard = [
            [InlineKeyboardButton("üìã –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("üí™ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="workout")],
            [InlineKeyboardButton("üë• –ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞", callback_data="group_workout")],
            [InlineKeyboardButton("üìä –ü—Ä–æ–≥—Ä–µ—Å—Å", callback_data="progress")],
            [InlineKeyboardButton("üî• –ú–æ—Ç–∏–≤–∞—Ü–∏—è", callback_data="motivation")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_message,
            reply_markup=reply_markup,
            parse_mode=ParseMode.HTML
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = f"ü§ñ <b>{BOT_NAME} - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º</b>\n\n"
        
        for command, description in self.commands.items():
            help_text += f"/{command} - {description}\n"
        
        help_text += "\nüí° <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
        help_text += "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É –∫–∞–∫ —Ç—Ä–µ–Ω–µ—Ä\n"
        help_text += "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞\n"
        help_text += "‚Ä¢ –í –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö —è –ø–æ–º–Ω—é –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞\n"
        
        await update.message.reply_text(help_text, parse_mode=ParseMode.HTML)
    
    async def profile_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
        user = update.effective_user
        user_info = self.db.get_user_info(user.id)
        
        if user_info:
            profile_text = f"""
üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å {user.first_name}</b>

üìä <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {user_info.get('fitness_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}
‚Ä¢ –¶–µ–ª–∏: {user_info.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}

üîÑ <b>–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å:</b>
–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:
            """
            
            keyboard = [
                [InlineKeyboardButton("üü¢ –ù–∞—á–∏–Ω–∞—é—â–∏–π", callback_data="level_beginner")],
                [InlineKeyboardButton("üü° –°—Ä–µ–¥–Ω–∏–π", callback_data="level_intermediate")],
                [InlineKeyboardButton("üî¥ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π", callback_data="level_advanced")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                profile_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.HTML
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π /start")
    
    async def workout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /workout"""
        user = update.effective_user
        user_info = self.db.get_user_info(user.id)
        
        if not user_info:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —á–µ—Ä–µ–∑ –ò–ò
        workout_plan = await self.ai_client.generate_workout_plan(user_info)
        
        if workout_plan:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            if len(workout_plan) > MAX_MESSAGE_LENGTH:
                parts = [workout_plan[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(workout_plan), MAX_MESSAGE_LENGTH)]
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"üìã <b>–ü–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—á–∞—Å—Ç—å {i+1}/{len(parts)})</b>\n\n{part}", parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(f"üìã <b>–¢–≤–æ–π –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:</b>\n\n{workout_plan}", parse_mode=ParseMode.HTML)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –±–∞–∑–µ
            workout_data = {
                "type": "individual",
                "generated_at": datetime.now().isoformat(),
                "user_level": user_info.get('fitness_level'),
                "goals": user_info.get('goals')
            }
            self.db.save_workout(user.id, "individual", workout_data)
            
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def group_workout_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /group_workout"""
        chat = update.effective_chat
        
        if chat.type == "private":
            await update.message.reply_text("üë• –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —á–∞—Ç–µ
        chat_users = self.db.get_chat_users(chat.id)
        
        if len(chat_users) < 2:
            await update.message.reply_text("üë• –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
        group_workout = await self.ai_client.generate_group_workout(chat_users)
        
        if group_workout:
            if len(group_workout) > MAX_MESSAGE_LENGTH:
                parts = [group_workout[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(group_workout), MAX_MESSAGE_LENGTH)]
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"üë• <b>–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)})</b>\n\n{part}", parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(f"üë• <b>–ì—Ä—É–ø–ø–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–ª—è –≤—Å–µ—Ö:</b>\n\n{group_workout}", parse_mode=ParseMode.HTML)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
            workout_data = {
                "type": "group",
                "participants": len(chat_users),
                "generated_at": datetime.now().isoformat(),
                "chat_id": chat.id
            }
            
            for user in chat_users:
                self.db.save_workout(user['user_id'], "group", workout_data)
                
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def progress_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /progress"""
        user = update.effective_user
        user_info = self.db.get_user_info(user.id)
        
        if not user_info:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        workouts = self.db.get_user_workouts(user.id, limit=5)
        
        if workouts:
            progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å {user.first_name}</b>\n\n"
            progress_text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:\n"
            
            for workout in workouts:
                status = "‚úÖ" if workout['completed'] else "‚è≥"
                date = workout.get('scheduled_date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                progress_text += f"{status} {workout['type']} - {date}\n"
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —á–µ—Ä–µ–∑ –ò–ò
            progress_analysis = await self.ai_client.analyze_progress(user_info, workouts)
            if progress_analysis:
                progress_text += f"\n<b>–ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–µ—Ä–∞:</b>\n{progress_analysis}"
            
        else:
            progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å {user.first_name}</b>\n\n"
            progress_text += "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /workout!"
        
        await update.message.reply_text(progress_text, parse_mode=ParseMode.HTML)
    
    async def motivation_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /motivation"""
        user = update.effective_user
        user_info = self.db.get_user_info(user.id)
        
        if not user_info:
            await update.message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        motivational_message = await self.ai_client.generate_motivational_message(
            user_info, 
            context="morning_motivation"
        )
        
        if motivational_message:
            await update.message.reply_text(f"üî• <b>–ú–æ—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è {user.first_name}:</b>\n\n{motivational_message}", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        chat = update.effective_chat
        message_text = update.message.text
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ
        self.db.save_message(chat.id, user.id, message_text)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        chat_history = self.db.get_chat_history(chat.id, limit=20)
        chat_users = self.db.get_chat_users(chat.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
        chat_context = {
            'users': chat_users,
            'chat_type': chat.type,
            'chat_title': chat.title
        }
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è API
        formatted_messages = self.ai_client.format_chat_history(chat_history)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        formatted_messages.append({
            "role": "user",
            "content": f"{user.first_name}: {message_text}"
        })
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = await self.ai_client.get_response(formatted_messages, chat_context)
        
        if ai_response:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.db.save_message(chat.id, 0, ai_response)  # user_id = 0 –¥–ª—è –±–æ—Ç–∞
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if len(ai_response) > MAX_MESSAGE_LENGTH:
                parts = [ai_response[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(ai_response), MAX_MESSAGE_LENGTH)]
                for i, part in enumerate(parts):
                    await update.message.reply_text(f"üí¨ <b>–û—Ç–≤–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ (—á–∞—Å—Ç—å {i+1}/{len(parts)})</b>\n\n{part}", parse_mode=ParseMode.HTML)
            else:
                await update.message.reply_text(f"üí¨ <b>–û—Ç–≤–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞:</b>\n\n{ai_response}", parse_mode=ParseMode.HTML)
        else:
            await update.message.reply_text("‚ùå –ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data.startswith("level_"):
            level = data.replace("level_", "")
            user = update.effective_user
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.db.update_user_fitness_info(user.id, fitness_level=level)
            
            level_names = {
                "beginner": "–Ω–∞—á–∏–Ω–∞—é—â–∏–π",
                "intermediate": "—Å—Ä–µ–¥–Ω–∏–π", 
                "advanced": "–ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π"
            }
            
            await query.edit_message_text(
                f"‚úÖ –£—Ä–æ–≤–µ–Ω—å {user.first_name} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: <b>{level_names.get(level, level)}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥–æ–π /workout!",
                parse_mode=ParseMode.HTML
            )
            
        elif data == "profile":
            await self.profile_command(update, context)
            
        elif data == "workout":
            await self.workout_command(update, context)
            
        elif data == "group_workout":
            await self.group_workout_command(update, context)
            
        elif data == "progress":
            await self.progress_command(update, context)
            
        elif data == "motivation":
            await self.motivation_command(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(TELEGRAM_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("profile", self.profile_command))
        application.add_handler(CommandHandler("workout", self.workout_command))
        application.add_handler(CommandHandler("group_workout", self.group_workout_command))
        application.add_handler(CommandHandler("progress", self.progress_command))
        application.add_handler(CommandHandler("motivation", self.motivation_command))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ callback
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        application.run_polling()

if __name__ == "__main__":
    bot = FitnessTrainerBot()
    bot.run()
